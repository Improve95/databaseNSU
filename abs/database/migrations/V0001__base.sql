create table positions (
    id int primary key generated by default as identity ,
    name varchar(50) unique
);

create table employees (
    id int primary key generated by default as identity ,
    name varchar(50) not null ,
    position_id int references positions("id") on delete set null,
    manager_id int default null,
    foreign key (manager_id) references employees("id")
        deferrable initially immediate
);

create type employment_type as enum ('t1', 't2', 't3', 't4');
create table clients (
    id int primary key generated by default as identity ,
    name varchar(50) not null ,
    employment employment_type
);

create type credit_type as enum ('t1', 't2', 't3', 't4', 't5');
create table credit_tariffs (
    id int primary key generated by default as identity ,
    type credit_type not null ,
    initial_amount numeric(15, 2) not null check ( initial_amount > 0 ),
    final_amount numeric(15, 2) not null check ( initial_amount > 0 ) ,
    payment_period interval not null ,
    credit_percent int not null check ( credit_percent > 0 )
);

create table credit_tariff_client (
    client_id int references clients("id") on delete cascade ,
    credit_tariff_id int references credit_tariffs("id") on delete cascade ,
    primary key (client_id, credit_tariff_id)
);


create table requests (
    id bigint primary key generated by default as identity ,
    credit_tariff int not null references credit_tariffs("id") ,
    time timestamp with time zone not null default current_timestamp ,
    client_id int not null references clients("id") on delete cascade
);

create type credit_scoring_status as enum ('approve', 'reject');
create table credits_scoring (
    score numeric(15, 2) not null ,
    credit_request_id bigint primary key references requests("id") on delete cascade ,
    status credit_scoring_status not null
);

create table credits (
    id bigint primary key generated by default as identity ,
    initial_debt numeric(15, 2) not null check ( initial_debt >= 0 ) ,
    taking_date date not null default current_date,
    percent int not null check ( percent > 0 ),
    credit_period interval not null ,
    month_amount numeric(15, 2) not null check ( month_amount > 0 ) ,
    client_id int not null ,
    credit_tariff_id int not null ,
    foreign key (client_id, credit_tariff_id) references credit_tariff_client (client_id, credit_tariff_id) on delete set null
);


