create table users (
    id int primary key generated by default as identity,
    email varchar(100) unique not null,
    password varchar(512) not null,
    name varchar(50) not null,
    employment varchar(100)
);

create table roles (
    id int primary key generated by default as identity,
    name varchar(15) not null
);
insert into roles (name) values
                             ('ROLE_ADMIN'),
                             ('ROLE_OPERATOR'),
                             ('ROLE_CLIENT');

create table user_role (
    user_id int references users(id) on delete cascade not null,
    role_id int references roles(id) unique not null
);

create table sessions (
    id bigint primary key generated by default as identity,
    user_id int references users(id) on delete cascade not null,
    issued_at timestamp not null,
    expired_at timestamp not null,
    is_enable boolean
);

create table acl_sid(
    id bigint not null primary key generated by default as identity,
    principal boolean not null,
    sid varchar(100) not null,
    constraint unique_uk_1 unique(sid, principal)
);

create table acl_class(
    id bigint not null primary key generated by default as identity,
    class varchar(500) unique not null,
    class_id_type varchar(500)
);

create table acl_object_identity(
    id bigint primary key generated by default as identity,
    object_id_class bigint references acl_class(id) not null,
    object_id_identity varchar(36) not null,
    parent_object bigint references acl_object_identity(id),
    owner_sid bigint references acl_sid(id),
    entries_inheriting boolean not null,
    constraint unique_uk_3 unique(object_id_class, object_id_identity)
);

create table acl_entry(
    id bigserial primary key,
    acl_object_identity bigint not null,
    ace_order int not null,
    sid bigint not null,
    mask integer not null,
    granting boolean not null,
    audit_success boolean not null,
    audit_failure boolean not null,
    constraint unique_uk_4 unique(acl_object_identity,ace_order),
    constraint foreign_fk_4 foreign key(acl_object_identity) references acl_object_identity(id),
    constraint foreign_fk_5 foreign key(sid) references acl_sid(id)
);


create table employees (
    id int references users(id) primary key,
    position varchar(50) not null,
    manager_id int default null,
    foreign key (manager_id) references employees("id")
        deferrable initially immediate
);

/*create table clients (
    user_id int references users(id) primary key,
    employment varchar(100) not null
);*/

create table credit_tariffs (
    id int primary key generated by default as identity,
    type varchar(100) not null,
    initial_amount numeric(15, 2) not null check ( initial_amount > 0 ),
    final_amount numeric(15, 2) not null check ( initial_amount > 0 ),
    payment_period interval not null,
    credit_percent int not null check ( credit_percent > 0 )
);

create table credit_tariff_client (
    user_id int references users(id) on delete cascade,
    credit_tariff_id int references credit_tariffs("id") on delete cascade,
    primary key (user_id, credit_tariff_id)
);

create table requests (
    id bigint primary key generated by default as identity,
    credit_tariff int not null references credit_tariffs("id"),
    time timestamp not null default current_timestamp,
    user_id int not null references users(id) on delete cascade
);

create table credits_scoring (
    score numeric(15, 2) not null,
    credit_request_id bigint primary key references requests("id") on delete cascade,
    status varchar(10) not null
);

create table credits (
    id bigint primary key generated by default as identity,
    initial_debt numeric(15, 2) not null check ( initial_debt >= 0 ),
    taking_date date not null default current_date,
    percent int not null check ( percent > 0 ),
    credit_period interval not null,
    month_amount numeric(15, 2) not null check ( month_amount > 0 ),
    user_id int not null,
    credit_tariff_id int not null,
    foreign key (user_id, credit_tariff_id) references credit_tariff_client (user_id, credit_tariff_id) on delete set null
);

create table balances (
    id bigint primary key generated by default as identity,
    credit_id int references credits(id) not null,
    remaining_debt numeric(15, 2) not null,
    accrued_by_percent numeric(15, 2) not null check ( accrued_by_percent > 0 ),
    date date not null default current_date
);

create table penalties (
    balances_id int references balances(id) primary key,
    penalties numeric(15, 2) not null default 0
);

create table payments_schedule (
    id bigint primary key generated by default as identity,
    credit_id bigint not null references credits("id"),
    amount numeric(15, 2) not null check ( amount > 0 ),
    deadline timestamp not null,
    is_paid boolean default false
);

create table payments (
    amount numeric(15, 2) not null check ( amount > 0 ),
    commission decimal(15, 2) not null check ( commission >= 0 ) default 0,
    time timestamp not null default current_timestamp,
    credit_id bigint not null references credits("id") on delete set null
);
